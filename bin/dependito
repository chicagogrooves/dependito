#!/usr/bin/env node

'use strict';

var Version = require('../lib/version');
var Commander = require('commander');
var Dependito = require('../lib/Dependito');
var fs = require('fs');
var _ = require('underscore')._;

Commander
  .version(Version)
  .usage('[options] <file|dir ...>')
  .option('-f, --format <name>', 'format to parse (amd/cjs/json)', 'amd')
  .option('-t, --title <title>', 'title of generated document', 'Dependito')
  .option('-r, --recent <filename>', 'a json file of recent updates')
  .option('-v, --reverse', 'reverse direction of arrows', false)
  .option('-d, --deps <filename>', 'when used with \'-f json\', a file to load deps from in {p1:[\'c1\',\'c2\']} format')
  .option('-x, --exclude <regex>', 'a regular expression for excluding modules')
  .parse(process.argv);

if (!Commander.args.length) {
  console.log(Commander.helpInformation());
  process.exit(1);
}

var src = Commander.args[0];

var recentUpdates = fs.existsSync(Commander.recent) && JSON.parse(fs.readFileSync(Commander.recent));
var directDeps = Commander.format==='json' && fs.existsSync(Commander.deps) && JSON.parse(fs.readFileSync(Commander.deps));
var reverse_transformer = function(tree){
    var dual = {};
    _.each(tree, function(targets, source) {
      return _.each(targets, function(t) {
        if (!dual[t]) {
          return dual[t] = [source];
        } else {
          return dual[t].unshift(source);
        }
      });
    });
    return dual;
};

// Fire up Dependito
var dependito = new Dependito(src, {
  cliOptions: Commander,
  recentUpdates: (recentUpdates || {}),
  directDeps: directDeps,
  transform: Commander.reverse ? reverse_transformer : undefined
});

var html = dependito.generateHtml();

process.stdout.write(html);
